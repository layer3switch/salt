# Salt Minion floscript

house minion

init name in .raet.udp.stack.local from value in .salt.etc.id
init localname in .raet.udp.stack.local from value in .salt.etc.id

init .salt.uxd.stack.local to yid 0 name "minion" localname "minion" lanename "minion"

framer minionudpstack be active first setup
    frame setup
        enter
            do load modules
    frame manorsetup
        enter
            do salt manor lane setup
        go start
    frame start
        do salt raet road stack per inode ".raet.udp.stack"
        exit
            do salt raet road stack closer per inode ".raet.udp.stack."
            do salt raet lane stack closer per inode ".salt.uxd.stack."

framer inbound be active first start
    frame start
        do salt raet road stack service rx

framer bootstrap be active first join
    frame join
        print Joining...
        enter
            do salt raet road stack joiner per inode ".raet.udp.stack."
        recur
            do salt raet road stack joined per inode ".raet.udp.stack."
            do salt raet road stack rejected per inode ".raet.udp.stack."

        go next if joined in .raet.udp.stack.status
        go abort if rejected in .raet.udp.stack.status
        #go abort if elapsed >= 10

    frame joined
        print Joined
        go next

    frame allow
        print Allowing...
        enter
            do salt raet road stack allower per inode ".raet.udp.stack."
        recur
            do salt raet road stack allowed per inode ".raet.udp.stack."

        go next if allowed in .raet.udp.stack.status
        #go abort if elapsed >= 5

    frame allowed
        print Allowed
        go next

    frame loading
        enter
            do load modules
        go next

    frame pillar
        enter
            do load pillar
        go next

    frame router
        bid start manager #start alive presence from minion side
        do router

    frame abort
        bid stop all

framer eventing be active first event
    frame event
        do eventer

framer functionmanager be active first checkexec
    frame checkexec
        do nix executor

framer manager be inactive first start at 1.0
    frame start
         do salt raet road stack manager per inode ".raet.udp.stack"

framer outbound be active first start
    frame start
        do salt raet road stack service tx

#framer scheduler be active first start
#    frame start
#        do schedule
