diff --git a/salt/modules/boto_route53.py b/salt/modules/boto_route53.py
index ef1e83ce3e..5b9e7a80fc 100644
--- a/salt/modules/boto_route53.py
+++ b/salt/modules/boto_route53.py
@@ -147,8 +147,8 @@ def describe_hosted_zones(zone_id=None, domain_name=None, region=None,
     if zone_id and domain_name:
         raise SaltInvocationError('At most one of zone_id or domain_name may '
                                   'be provided')
-    retries = 10
-    while retries:
+    error_retries = 10
+    while error_retries:
         try:
             if zone_id:
                 zone_id = zone_id.replace('/hostedzone/',
@@ -169,11 +169,17 @@ def describe_hosted_zones(zone_id=None, domain_name=None, region=None,
             return ret if ret else []
         except DNSServerError as e:
             # if rate limit, retry:
-            if retries and 'Throttling' == e.code:
+            if error_retries and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
                 time.sleep(3)
-                tries -= 1
+                error_retries -= 1
                 continue
+            elif error_retries and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
             log.error('Could not list zones: {0}'.format(e.message))
             return []
 
@@ -235,7 +241,7 @@ def list_all_zones_by_id(region=None, key=None, keyid=None, profile=None):
 
 
 def zone_exists(zone, region=None, key=None, keyid=None, profile=None,
-                retry_on_rate_limit=True, rate_limit_retries=5):
+                retry_on_error=True, error_retries=5):
     '''
     Check for the existence of a Route53 hosted zone.
 
@@ -250,16 +256,22 @@ def zone_exists(zone, region=None, key=None, keyid=None, profile=None,
 
     conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
 
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             return bool(conn.get_zone(zone))
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
@@ -352,7 +364,7 @@ def _decode_name(name):
 
 def get_record(name, zone, record_type, fetch_all=False, region=None, key=None,
                keyid=None, profile=None, split_dns=False, private_zone=False,
-               identifier=None, retry_on_rate_limit=True, rate_limit_retries=5):
+               identifier=None, retry_on_error=True, error_retries=5):
     '''
     Get a record from a zone.
 
@@ -365,7 +377,7 @@ def get_record(name, zone, record_type, fetch_all=False, region=None, key=None,
 
     conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
 
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             if split_dns:
                 _zone = _get_split_zone(zone, conn, private_zone)
@@ -386,10 +398,16 @@ def get_record(name, zone, record_type, fetch_all=False, region=None, key=None,
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
@@ -416,7 +434,7 @@ def _munge_value(value, _type):
 def add_record(name, value, zone, record_type, identifier=None, ttl=None,
                region=None, key=None, keyid=None, profile=None,
                wait_for_sync=True, split_dns=False, private_zone=False,
-               retry_on_rate_limit=True, rate_limit_retries=5):
+               retry_on_error=True, error_retries=5):
     '''
     Add a record to a zone.
 
@@ -429,7 +447,7 @@ def add_record(name, value, zone, record_type, identifier=None, ttl=None,
 
     conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)
 
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             if split_dns:
                 _zone = _get_split_zone(zone, conn, private_zone)
@@ -444,15 +462,21 @@ def add_record(name, value, zone, record_type, identifier=None, ttl=None,
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
     _value = _munge_value(value, _type)
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             # add_record requires a ttl value, annoyingly.
             if ttl is None:
@@ -462,10 +486,16 @@ def add_record(name, value, zone, record_type, identifier=None, ttl=None,
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
@@ -473,7 +503,7 @@ def add_record(name, value, zone, record_type, identifier=None, ttl=None,
 def update_record(name, value, zone, record_type, identifier=None, ttl=None,
                   region=None, key=None, keyid=None, profile=None,
                   wait_for_sync=True, split_dns=False, private_zone=False,
-                  retry_on_rate_limit=True, rate_limit_retries=5):
+                  retry_on_error=True, error_retries=5):
     '''
     Modify a record in a zone.
 
@@ -497,7 +527,7 @@ def update_record(name, value, zone, record_type, identifier=None, ttl=None,
     _type = record_type.upper()
 
     _value = _munge_value(value, _type)
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             old_record = _zone.find_records(name, _type, identifier=identifier)
             if not old_record:
@@ -507,10 +537,16 @@ def update_record(name, value, zone, record_type, identifier=None, ttl=None,
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
@@ -518,7 +554,7 @@ def update_record(name, value, zone, record_type, identifier=None, ttl=None,
 def delete_record(name, zone, record_type, identifier=None, all_records=False,
                   region=None, key=None, keyid=None, profile=None,
                   wait_for_sync=True, split_dns=False, private_zone=False,
-                  retry_on_rate_limit=True, rate_limit_retries=5):
+                  retry_on_error=True, error_retries=5):
     '''
     Modify a record in a zone.
 
@@ -541,7 +577,7 @@ def delete_record(name, zone, record_type, identifier=None, all_records=False,
         return False
     _type = record_type.upper()
 
-    while rate_limit_retries > 0:
+    while error_retries > 0:
         try:
             old_record = _zone.find_records(name, _type, all=all_records, identifier=identifier)
             if not old_record:
@@ -551,10 +587,16 @@ def delete_record(name, zone, record_type, identifier=None, all_records=False,
 
         except DNSServerError as e:
             # if rate limit, retry:
-            if retry_on_rate_limit and 'Throttling' == e.code:
+            if retry_on_error and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
-                time.sleep(2)
-                rate_limit_retries -= 1
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
+            elif retry_on_error and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
                 continue  # the while True; try again if not out of retries
             raise e
 
@@ -684,8 +726,8 @@ def create_hosted_zone(domain_name, caller_ref=None, comment='',
             log.info('Options vpc_id, vpc_name, and vpc_region are ignored '
                      'when creating non-private zones.')
 
-    retries = 10
-    while retries:
+    error_retries = 10
+    while error_retries:
         try:
             # Crazy layers of dereference...
             r = conn.create_hosted_zone(**args)
@@ -693,11 +735,17 @@ def create_hosted_zone(domain_name, caller_ref=None, comment='',
                     'CreateHostedZoneResponse') else {}
             return r.get('parent', {}).get('CreateHostedZoneResponse')
         except DNSServerError as e:
-            if retries and 'Throttling' == e.code:
+            if error_retries and 'Throttling' == e.code:
                 log.debug('Throttled by AWS API.')
                 time.sleep(3)
-                retries -= 1
+                error_retries -= 1
                 continue
+            elif error_retries and 'PriorRequestNotComplete' == e.code:
+                log.debug('The request was rejected by AWS API.\
+                          Route 53 was still processing a prior request')
+                time.sleep(3)
+                error_retries -= 1
+                continue  # the while True; try again if not out of retries
             log.error('Failed to create hosted zone {0}: {1}'.format(
                     domain_name, e.message))
             return None
