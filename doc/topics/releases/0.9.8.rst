========================
Salt 0.9.8 Release Notes
========================

Salt 0.9.8 is a big step forward, with many additions and enhancements, as
well as a number of precursors to advanced future developments.

This version of Salt adds much more power to the command line, making the
old hard timeout issues a thing of the past, and adding kwargs support to
salt calls. These additions are also available in the salt client api, making
the available api tools much more powerful.

The new pillar system allows for data to be stored on the master and
assigned to minions in a granular way similar to the state system.

Additions to requisites making them much more powerful have been added and
improved error checking for sls files in the state system. A new provider
system has been added to allow for redirecting what modules function in
the background for individual states.

Support for OpenSUSE has been added and support for Solaris has begun
serious development.

The matcher and target systems have received a great deal of attention, the
default behavior of grain matching has changed slightly to reflect the regular
salt default behavior and the compound matcher system has been greatly refined.

A number of impressive features with keyword arguments have been added to both
the cli and to the state system, making states much more powerful and flexible,
but available in a clean and simple way.

The new batch size capability allows for executions to be rolled through the
targeted minions.

Upgrade Considerations
======================

Upgrade Issue
-------------

There was an oversight that has been previously missed which could cause a
newer minion to crash an older master. This oversight has been repaired so
that this version incompatibility issue will not occur again. When upgrading
to 0.9.8 make sure to upgrade the master first, followed by the minions.

Debian/Ubuntu Packages
----------------------

The original Debian/Ubuntu packages were called salt and included all salt
applications. New packages in the ppa are split. If an old salt package is
installed then it should be manually removed and the new split packages
need to be installed fresh.


Major Features
==============

Pillar
------

Pillar offers an interface to declare variable data on the master that is then
assigned to the minions. The pillar data is made available to all modules,
states, sls files etc. It is compiled on the master and is declared using the
existing render system. This means that learning pillar should be fairly
trivial to those already familiar with salt states.

CLI Additions
-------------

The salt command in 0.9.8 has received a serious overhaul and is more powerful
then ever. Data is returned to the terminal as it is received, and the salt
command will now wait for all running minions to return data before stopping.

Kwargs and States
-----------------

A new addition to writing state modules has been made available. State modules
can now accept the ``**kwargs`` argument. The result of this is that all data
in an sls file assigned to a state will be made available to the state function.

This enables data to be passed in a transparent way back to the modules that
are executing the logic. In particular this allows us to add arguments to the
pkg.install module that enable more advanced and granular controls with respect
to what the state is capable of.

Kwargs and the CLI
------------------

In the past it was required that all arguments be passed in order to modules 
from the salt and salt-call commands. As of 0.9.8 keyword arguments can be
passed in the form of ``kwarg=argument``.

Matcher Refinements and Changes
-------------------------------

Providers
---------

Requisite Glob Matching
-----------------------

Batch Size
----------

In Progress Development
=======================

Master Side State Compiling
---------------------------

While we feel strongly that the advantages gained with minion side state
compiling is very critical, it does prevent certain features what may be
desired. 0.9.8 has support for initial master side state compiling, but many
more components still need to be developed, it is hoped that these can be
finished for 0.9.9.

The goal is that states can be compiled on both the master and the minion
allowing for compilation to be split between master and minion.
