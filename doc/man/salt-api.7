.\" Man page generated from reStructuredText.
.
.TH "SALT-API" "7" "April 05, 2014" "0.8.3" "salt-api"
.SH NAME
salt-api \- salt-api Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fBsalt\-api\fP is a modular interface on top of \fI\%Salt\fP that can provide a
variety of entry points into a running Salt system. It can start and manage
multiple interfaces allowing a REST API to coexist with XMLRPC or even a
Websocket API.
.SH GETTING STARTED
.INDENT 0.0
.IP 1. 3
Install \fBsalt\-api\fP on the same machine as your Salt master.
.IP 2. 3
Edit your Salt master config file for all required options for each
\fBnetapi\fP module you wish to run.
.IP 3. 3
Install any required additional libraries or software for each \fBnetapi\fP
module you wish to run.
.IP 4. 3
Run \fBsalt\-api\fP which will then start all configured \fBnetapi\fP
modules.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Each \fBnetapi\fP module will have differing configuration requirements and
differing required software libraries.
.sp
Exactly like the various module types in Salt (\fIexecution modules\fP,
\fIrenderer modules\fP, \fIreturner modules\fP, etc.), \fInetapi
modules\fP in \fBsalt\-api\fP will \fInot\fP be loaded into memory or started
if all requirements are not met.
.UNINDENT
.UNINDENT
.SH INSTALLATION QUICKSTART
.SS salt\-api Quickstart
.sp
\fBsalt\-api\fP manages \fInetapi modules\fP which are modules that
(usually) bind to a port and start a service. Each netapi module will have
specific requirements for third\-party libraries and configuration (which goes
in the master config file). Read the documentation for each netapi module to
determine what is needed.
.sp
For example, the \fBrest_cherrypy\fP
netapi module requires that CherryPy be installed and that a \fBrest_cherrypy\fP
section be added to the master config that specifies which port to listen on.
.SS Installation
.SS PyPI
.sp
\fI\%https://pypi.python.org/pypi/salt\-api\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
pip install salt\-api
.ft P
.fi
.UNINDENT
.UNINDENT
.SS RHEL, Fedora, CentOS
.sp
RPMs are available in the Fedora repositories and EPEL:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
yum install salt\-api
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ubuntu
.sp
PPA packages available for Ubuntu on LaunchPad:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sudo add\-apt\-repository ppa:saltstack/salt
sudo apt\-get update
sudo apt\-get install salt\-api
.ft P
.fi
.UNINDENT
.UNINDENT
.SS openSUSE, SLES
.sp
RPMs are available via the OBS:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
zypper install salt\-api
.ft P
.fi
.UNINDENT
.UNINDENT
.SH NETAPI MODULES
.sp
The core functionality for \fBsalt\-api\fP lies in pluggable \fBnetapi\fP
modules that adhere to the simple interface of binding to a port and starting a
service. \fBsalt\-api\fP can manage one or many services concurrently.
.SS Full list of \fBnetapi\fP modules
.SS Full list of netapi modules
.SS rest_cherrypy
.SS A REST API for Salt
.INDENT 0.0
.TP
.B depends
.INDENT 7.0
.IP \(bu 2
CherryPy Python module
.UNINDENT
.TP
.B configuration
All authentication is done through Salt\(aqs \fI\%external auth\fP system. Be sure that it is enabled and the user you are
authenticating as has permissions for all the functions you will be
running.
.sp
Example production configuration block; add to the Salt master config file:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
rest_cherrypy:
  port: 8000
  ssl_crt: /etc/pki/tls/certs/localhost.crt
  ssl_key: /etc/pki/tls/certs/localhost.key
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The REST interface strongly recommends a secure HTTPS connection since Salt
authentication credentials will be sent over the wire. If you don\(aqt already
have a certificate and don\(aqt wish to buy one, you can generate a
self\-signed certificate using the
\fI\%create_self_signed_cert()\fP function in Salt (note
the dependencies for this module):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% salt\-call tls.create_self_signed_cert
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All available configuration options are detailed below. These settings
configure the CherryPy HTTP server and do not apply when using an external
server such as Apache or Nginx.
.INDENT 7.0
.TP
.B port
\fBRequired\fP
.sp
The port for the webserver to listen on.
.TP
.B host
\fB0.0.0.0\fP
The socket interface for the HTTP server to listen on.
.sp
New in version 0.8.2.

.TP
.B debug
\fBFalse\fP
Starts the web server in development mode. It will reload itself when
the underlying code is changed and will output more debugging info.
.TP
.B ssl_crt
The path to a SSL certificate. (See below)
.TP
.B ssl_key
The path to the private key for your SSL certificate. (See below)
.TP
.B disable_ssl
A flag to disable SSL. Warning: your Salt authentication credentials
will be sent in the clear!
.sp
New in version 0.8.3.

.TP
.B thread_pool
\fB100\fP
The number of worker threads to start up in the pool.
.sp
Changed in version 0.8.4: Previous versions defaulted to a pool of \fB10\fP

.TP
.B socket_queue_size
\fB30\fP
Specify the maximum number of HTTP connections to queue.
.sp
Changed in version 0.8.4: Previous versions defaulted to \fB5\fP connections.

.TP
.B max_request_body_size
\fB1048576\fP
Changed in version 0.8.4: Previous versions defaulted to \fB104857600\fP for the size of the
request body

.TP
.B collect_stats
False
Collect and report statistics about the CherryPy server
.sp
New in version 0.8.4.

.sp
Reports are available via the \fBStats\fP URL.
.TP
.B static
A filesystem path to static HTML/JavaScript/CSS/image assets.
.TP
.B static_path
\fB/static\fP
The URL prefix to use when serving static assets out of the directory
specified in the \fBstatic\fP setting.
.sp
New in version 0.8.2.

.TP
.B app
A filesystem path to an HTML file that will be served as a static file.
This is useful for bootstrapping a single\-page JavaScript app.
.sp
New in version 0.8.2.

.TP
.B app_path
\fB/app\fP
The URL prefix to use for serving the HTML file specified in the \fBapp\fP
setting. This should be a simple name containing no slashes.
.sp
Any path information after the specified path is ignored; this is
useful for apps that utilize the HTML5 history API.
.sp
New in version 0.8.2.

.TP
.B root_prefix
\fB/\fP
A URL path to the main entry point for the application. This is useful
for serving multiple applications from the same URL.
.sp
New in version 0.8.4.

.UNINDENT
.UNINDENT
.SS Authentication
.sp
Authentication is performed by passing a session token with each request. The
token may be sent either via a custom header named \fIX\-Auth\-Token\fP
or sent inside a cookie. (The result is the same but browsers and some HTTP
clients handle cookies automatically and transparently so it is a convenience.)
.sp
Token are generated via the \fBLogin\fP URL.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
You can bypass the session handling via the \fBRun\fP URL.
.UNINDENT
.UNINDENT
.SS Usage
.sp
You access a running Salt master via this module by sending HTTP requests to
the URLs detailed below.
.INDENT 0.0
.INDENT 3.5
.IP "Content negotiation"
.sp
This REST interface is flexible in what data formats it will accept as well
as what formats it will return (e.g., JSON, YAML, x\-www\-form\-urlencoded).
.INDENT 0.0
.IP \(bu 2
Specify the format of data you are sending in a request by including the
\fIContent\-Type\fP header.
.IP \(bu 2
Specify your desired output format for the response with the
\fIAccept\fP header.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This REST interface expects data sent in \fI\%POST\fP and
\fI\%PUT\fP requests  to be in the format of a list of lowstate
dictionaries. This allows you to specify multiple commands in a single request.
.INDENT 0.0
.TP
.B lowstate
A dictionary containing various keys that instruct Salt which command
to run, where that command lives, any parameters for that command, any
authentication credentials, what returner to use, etc.
.sp
Salt uses the lowstate data format internally in many places to pass
command data between functions. Salt also uses lowstate for the
\fI\%LocalClient()\fP Python API interface.
.UNINDENT
.sp
For example (in JSON format):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[{
    \(aqclient\(aq: \(aqlocal\(aq,
    \(aqtgt\(aq: \(aq*\(aq,
    \(aqfun\(aq: \(aqtest.fib\(aq,
    \(aqarg\(aq: [\(aq10\(aq],
}]
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.IP "x\-www\-form\-urlencoded"
.sp
This REST interface accepts data in the x\-www\-form\-urlencoded format. This
is the format used by HTML forms, the default format used by
\fBcurl\fP, the default format used by many JavaScript AJAX libraries
(such as jQuery), etc. This format will be converted to the
\fIlowstate\fP format as best as possible with the caveats below. It is
always preferable to format data in the lowstate format directly in a more
capable format such as JSON or YAML.
.INDENT 0.0
.IP \(bu 2
Only a single command may be sent in this format per HTTP request.
.IP \(bu 2
Multiple \fBarg\fP params will be sent as a single list of params.
.sp
Note, some popular frameworks and languages (notably jQuery, PHP, and
Ruby on Rails) will automatically append empty brackets onto repeated
parameters. E.g., arg=one, arg=two will be sent as arg[]=one, arg[]=two.
Again, it is preferable to send lowstate via JSON or YAML directly by
specifying the \fIContent\-Type\fP header in the request.
.UNINDENT
.UNINDENT
.UNINDENT
.SS URL reference
.sp
The main entry point is the \fBroot URL (/)\fP and all
functionality is available at that URL. The other URLs are largely convenience
URLs that wrap that main entry point with shorthand or specialized
functionality.
.SS Deployment
.sp
The \fBrest_cherrypy\fP netapi module is a standard Python WSGI app. It can be
deployed one of two ways.
.SS \fBsalt\-api\fP using the CherryPy server
.sp
The default configuration is to run this module using \fBsalt\-api\fP to
start the Python\-based CherryPy server. This server is lightweight,
multi\-threaded, encrypted with SSL, and should be considered production\-ready.
.SS Using a WSGI\-compliant web server
.sp
This module may be deplayed on any WSGI\-compliant server such as Apache with
mod_wsgi or Nginx with FastCGI, to name just two (there are many).
.sp
Note, external WSGI servers handle URLs, paths, and SSL certs directly. The
\fBrest_cherrypy\fP configuration options are ignored and the \fBsalt\-api\fP daemon
does not need to be running at all. Remember Salt authentication credentials
are sent in the clear unless SSL is being enforced!
.sp
An example Apache virtual host configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<VirtualHost *:80>
    ServerName example.com
    ServerAlias *.example.com

    ServerAdmin webmaster@example.com

    LogLevel warn
    ErrorLog /var/www/example.com/logs/error.log
    CustomLog /var/www/example.com/logs/access.log combined

    DocumentRoot /var/www/example.com/htdocs

    WSGIScriptAlias / /path/to/saltapi/netapi/rest_cherrypy/wsgi.py
</VirtualHost>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS REST URI Reference
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.LowDataAdapter
The primary entry point to the REST API. All functionality is available
through this URL. The other available URLs provide convenience wrappers
around this URL.
.INDENT 7.0
.TP
.B GET()
.INDENT 7.0
.TP
.B GET /
An explanation of the API with links of where to go next.
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-i localhost:8000
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET / HTTP/1.1
Host: localhost:8000
Accept: application/json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Login(*args, **kwargs)
All interactions with this REST API must be authenticated. Authentication
is performed through Salt\(aqs eauth system. You must set the eauth backend
and allowed users by editing the \fI\%external_auth\fP section in
your master config.
.sp
Authentication credentials are passed to the REST API via a session id in
one of two ways:
.sp
If the request is initiated from a browser it must pass a session id via a
cookie and that session must be valid and active.
.sp
If the request is initiated programmatically, the request must contain a
\fIX\-Auth\-Token\fP header with valid and active session id.
.INDENT 7.0
.TP
.B GET()
Present the login interface
.INDENT 7.0
.TP
.B GET /login
An explanation of how to log in.
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-i localhost:8000/login
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /login HTTP/1.1
Host: localhost:8000
Accept: text/html
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: text/html
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(**kwargs)
Authenticate against Salt\(aqs eauth system
.sp
Changed in version 0.8.0: No longer returns a 302 redirect on success.

.sp
Changed in version 0.8.1: Returns 401 on authentication failure

.INDENT 7.0
.TP
.B POST /login
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-si localhost:8000/login \e
        \-H "Accept: application/json" \e
        \-d username=\(aqsaltuser\(aq \e
        \-d password=\(aqsaltpass\(aq \e
        \-d eauth=\(aqpam\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST / HTTP/1.1
Host: localhost:8000
Content\-Length: 42
Content\-Type: application/x\-www\-form\-urlencoded
Accept: application/json

username=saltuser&password=saltpass&eauth=pam
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
Content\-Length: 206
X\-Auth\-Token: 6d1b722e
Set\-Cookie: session_id=6d1b722e; expires=Sat, 17 Nov 2012 03:23:52 GMT; Path=/

{"return": {
    "token": "6d1b722e",
    "start": 1363805943.776223,
    "expire": 1363849143.776224,
    "user": "saltuser",
    "eauth": "pam",
    "perms": [
        "grains.*",
        "status.*",
        "sys.*",
        "test.*"
    ]
}}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Form eauth
the eauth backend configured in your master config
.TP
.B Form username
username
.TP
.B Form password
password
.TP
.B Status 200
success
.TP
.B Status 401
could not authenticate using provided credentials
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Logout
.INDENT 7.0
.TP
.B POST()
Destroy the currently active session and expire the session cookie
.sp
New in version 0.8.0.

.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Minions
.INDENT 7.0
.TP
.B GET(mid=None)
A convenience URL for getting lists of minions or getting minion
details
.INDENT 7.0
.TP
.B GET /minions/(mid)
Get grains, modules, functions, and inline function documentation
for all minions or a single minion
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-i localhost:8000/minions/ms\-3
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /minions/ms\-3 HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 129005
Content\-Type: application/x\-yaml

return:
\- ms\-3:
    grains.items:
      ...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBmid\fP \-\- (optional) a minion id
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(**kwargs)
Start an execution command and immediately return the job id
.INDENT 7.0
.TP
.B POST /minions
You must pass low\-data in the request body either from an HTML form
or as JSON or YAML. The \fBclient\fP option is pre\-set to
\fBlocal_async\fP\&.
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sSi localhost:8000/minions \e
    \-H "Accept: application/x\-yaml" \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqstatus.diskusage\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /minions HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
Content\-Length: 26
Content\-Type: application/x\-www\-form\-urlencoded

tgt=*&fun=status.diskusage
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Content\-Length: 86
Content\-Type: application/x\-yaml

return:
\- jid: \(aq20130603122505459265\(aq
  minions: [ms\-4, ms\-3, ms\-2, ms\-1, ms\-0]
_links:
  jobs:
  \- href: /jobs/20130603122505459265
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Form lowstate
lowstate data for the
\fBLocalClient\fP; the \fBclient\fP parameter will
be set to \fBlocal_async\fP
.sp
Lowstate may be supplied in any supported format by specifying the
\fIContent\-Type\fP header in the request. Supported formats
are listed in the \fIAlternates\fP response header.
.TP
.B Status 202
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested \fIContent\-Type\fP not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Jobs
.INDENT 7.0
.TP
.B GET(jid=None)
A convenience URL for getting lists of previously run jobs or getting
the return from a single job
.INDENT 7.0
.TP
.B GET /jobs/(jid)
Get grains, modules, functions, and inline function documentation
for all minions or a single minion
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-i localhost:8000/jobs
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /jobs HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 165
Content\-Type: application/x\-yaml

return:
\- \(aq20121130104633606931\(aq:
    Arguments:
    \- \(aq3\(aq
    Function: test.fib
    Start Time: 2012, Nov 30 10:46:33.606931
    Target: jerry
    Target\-type: glob
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-i localhost:8000/jobs/20121130104633606931
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /jobs/20121130104633606931 HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 73
Content\-Type: application/x\-yaml

info:
\- Arguments:
  \- \(aq3\(aq
  Function: test.fib
  Minions:
  \- jerry
  Start Time: 2012, Nov 30 10:46:33.606931
  Target: \(aq*\(aq
  Target\-type: glob
  User: saltdev
  jid: \(aq20121130104633606931\(aq
return:
\- jerry:
  \- \- 0
    \- 1
    \- 1
    \- 2
  \- 6.9141387939453125e\-06
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBmid\fP \-\- (optional) a minion id
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Run
.INDENT 7.0
.TP
.B POST(**kwargs)
Run commands bypassing the normal session handling
.sp
New in version 0.8.0.

.INDENT 7.0
.TP
.B POST /run
This entry point is primarily for "one\-off" commands. Each request
must pass full Salt authentication credentials. Otherwise this URL
is identical to the root (\fB/\fP) execution URL.
.sp
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS localhost:8000/run \e
    \-H \(aqAccept: application/x\-yaml\(aq \e
    \-d client=\(aqlocal\(aq \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqtest.ping\(aq \e
    \-d username=\(aqsaltdev\(aq \e
    \-d password=\(aqsaltdev\(aq \e
    \-d eauth=\(aqpam\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /run HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
Content\-Length: 75
Content\-Type: application/x\-www\-form\-urlencoded

client=local&tgt=*&fun=test.ping&username=saltdev&password=saltdev&eauth=pam
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 73
Content\-Type: application/x\-yaml

return:
\- ms\-0: true
  ms\-1: true
  ms\-2: true
  ms\-3: true
  ms\-4: true
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Form lowstate
A list of \fIlowstate\fP data appropriate for the
\fI\%client\fP specified client interface. Full
external authentication credentials must be included.
.TP
.B Status 200
success
.TP
.B Status 401
authentication failed
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Events
The event bus on the Salt master exposes a large variety of things, notably
when executions are started on the master and also when minions ultimately
return their results. This URL provides a real\-time window into a running
Salt infrastructure.
.INDENT 7.0
.TP
.B GET(token=None)
Return an HTTP stream of the Salt master event bus; this stream is
formatted per the Server Sent Events (SSE) spec
.sp
New in version 0.8.3.

.sp
Browser clients currently lack Cross\-origin resource sharing (CORS)
support for the \fBEventSource()\fP API. Cross\-domain requests from a
browser may instead pass the \fIX\-Auth\-Token\fP value as an URL
parameter:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-NsS localhost:8000/events/6d1b722e
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B GET /events
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-NsS localhost:8000/events
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
GET /events HTTP/1.1
Host: localhost:8000
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Connection: keep\-alive
Cache\-Control: no\-cache
Content\-Type: text/event\-stream;charset=utf\-8

retry: 400
data: {\(aqtag\(aq: \(aq\(aq, \(aqdata\(aq: {\(aqminions\(aq: [\(aqms\-4\(aq, \(aqms\-3\(aq, \(aqms\-2\(aq, \(aqms\-1\(aq, \(aqms\-0\(aq]}}

data: {\(aqtag\(aq: \(aq20130802115730568475\(aq, \(aqdata\(aq: {\(aqjid\(aq: \(aq20130802115730568475\(aq, \(aqreturn\(aq: True, \(aqretcode\(aq: 0, \(aqsuccess\(aq: True, \(aqcmd\(aq: \(aq_return\(aq, \(aqfun\(aq: \(aqtest.ping\(aq, \(aqid\(aq: \(aqms\-1\(aq}}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The event stream can be easily consumed via JavaScript:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
# Note, you must be authenticated!
var source = new EventSource(\(aq/events\(aq);
source.onopen = function() { console.debug(\(aqopening\(aq) };
source.onerror = function(e) { console.debug(\(aqerror!\(aq, e) };
source.onmessage = function(e) { console.debug(e.data) };
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is also possible to consume the stream via the shell.
.sp
Records are separated by blank lines; the \fBdata:\fP and \fBtag:\fP
prefixes will need to be removed manually before attempting to
unserialize the JSON.
.sp
curl\(aqs \fB\-N\fP flag turns off input buffering which is required to
process the stream incrementally.
.sp
Here is a basic example of printing each event as it comes in:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-NsS localhost:8000/events |\e
        while IFS= read \-r line ; do
            echo $line
        done
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here is an example of using awk to filter events based on tag:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-NsS localhost:8000/events |\e
        awk \(aq
            BEGIN { RS=""; FS="\en" }
            $1 ~ /^tag: salt\e/job\e/[0\-9]+\e/new$/ { print $0 }
        \(aq
tag: salt/job/20140112010149808995/new
data: {"tag": "salt/job/20140112010149808995/new", "data": {"tgt_type": "glob", "jid": "20140112010149808995", "tgt": "jerry", "_stamp": "2014\-01\-12_01:01:49.809617", "user": "shouse", "arg": [], "fun": "test.ping", "minions": ["jerry"]}}
tag: 20140112010149808995
data: {"tag": "20140112010149808995", "data": {"fun_args": [], "jid": "20140112010149808995", "return": true, "retcode": 0, "success": true, "cmd": "_return", "_stamp": "2014\-01\-12_01:01:49.819316", "fun": "test.ping", "id": "jerry"}}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Status 200
success
.TP
.B Status 401
could not authenticate using provided credentials
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Webhook
A generic web hook entry point that fires an event on Salt\(aqs event bus
.sp
External services can POST data to this URL to trigger an event in Salt.
For example, Jenkins\-CI or Travis\-CI, or GitHub web hooks.
.sp
This entry point does not require authentication. The event data is taken
from the request body.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Be mindful of security
.sp
Salt\(aqs Reactor can run any code. If you write a Reactor SLS that
responds to a hook event be sure to validate that the event came from a
trusted source and contains valid data! Pass a secret key and use SSL.
.sp
This is a generic interface and securing it is up to you!
.UNINDENT
.UNINDENT
.sp
The event tag is prefixed with \fBsalt/netapi/hook\fP and the URL path is
appended to the end. For example, a \fBPOST\fP request sent to
\fB/hook/mycompany/myapp/mydata\fP will produce a Salt event with the tag
\fBsalt/netapi/hook/mycompany/myapp/mydata\fP\&. See the \fI\%Salt Reactor\fP documentation for how to react to events with various tags.
.sp
The following is an example \fB\&.travis.yml\fP file to send notifications to
Salt of successful test runs:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
language: python
script: python \-m unittest tests
after_success:
    \- \(aqcurl \-sS http://saltapi\-url.example.com:8000/hook/travis/build/success \-d branch="${TRAVIS_BRANCH}" \-d commit="${TRAVIS_COMMIT}"\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(*args, **kwargs)
Fire an event in Salt with a custom event tag and data
.sp
New in version 0.8.4.

.INDENT 7.0
.TP
.B POST /hook
\fBExample request\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS localhost:8000/hook \-d foo=\(aqFoo!\(aq \-d bar=\(aqBar!\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
POST /hook HTTP/1.1
Host: localhost:8000
Content\-Length: 16
Content\-Type: application/x\-www\-form\-urlencoded

foo=Foo&bar=Bar!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 14
Content\-Type: application/json

{"success": true}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
As a practical example, an internal continuous\-integration build
server could send an HTTP POST request to the URL
\fBhttp://localhost:8000/hook/mycompany/build/success\fP which contains
the result of a build and the SHA of the version that was built as
JSON. That would then produce the following event in Salt that could be
used to kick off a deployment via Salt\(aqs Reactor:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
Event fired at Fri Feb 14 17:40:11 2014
*************************
Tag: salt/netapi/hook/mycompany/build/success
Data:
{\(aq_stamp\(aq: \(aq2014\-02\-14_17:40:11.440996\(aq,
    \(aqheaders\(aq: {
        \(aqX\-My\-Secret\-Key\(aq: \(aqF0fAgoQjIT@W\(aq,
        \(aqContent\-Length\(aq: \(aq37\(aq,
        \(aqContent\-Type\(aq: \(aqapplication/json\(aq,
        \(aqHost\(aq: \(aqlocalhost:8000\(aq,
        \(aqRemote\-Addr\(aq: \(aq127.0.0.1\(aq},
    \(aqpost\(aq: {\(aqrevision\(aq: \(aqaa22a3c4b2e7\(aq, \(aqresult\(aq: True}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Salt\(aqs Reactor could listen for the event:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
reactor:
  \- \(aqsalt/netapi/hook/mycompany/build/*\(aq:
    \- /srv/reactor/react_ci_builds.sls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
And finally deploy the new build:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{% set secret_key = data.get(\(aqheaders\(aq, {}).get(\(aqX\-My\-Secret\-Key\(aq) %}
{% set build = data.get(\(aqpost\(aq, {}) %}

{% if secret_key == \(aqF0fAgoQjIT@W\(aq and build.result == True %}
deploy_my_app:
  cmd.state.sls:
    \- tgt: \(aqapplication*\(aq
    \- arg:
      \- myapp.deploy
      \- \(aqpillar={revision: {{ revision }}}\(aq
{% endif %}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Status 200
success
.TP
.B Status 406
requested Content\-Type not available
.TP
.B Status 413
request body is too large
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.app.Stats
Expose statistics on the running CherryPy server
.INDENT 7.0
.TP
.B GET()
Return a dump of statistics collected from the CherryPy server
.INDENT 7.0
.TP
.B Status 200
success
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.SS rest_wsgi
.SS A minimalist REST API for Salt
.sp
This \fBrest_wsgi\fP module provides a no\-frills REST interface to a running Salt
master. There are no dependencies.
.sp
Please read this introductory section in entirety before deploying this module.
.INDENT 0.0
.TP
.B configuration
All authentication is done through Salt\(aqs \fI\%external auth\fP system. Be sure that it is enabled and the user you are
authenticating as has permissions for all the functions you will be
running.
.sp
The configuration options for this module resides in the Salt master config
file. All available options are detailed below.
.INDENT 7.0
.TP
.B port
\fBRequired\fP
.sp
The port for the webserver to listen on.
.UNINDENT
.sp
Example configuration:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
rest_wsgi:
  port: 8001
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This API is not very "RESTful"; please note the following:
.INDENT 0.0
.IP \(bu 2
All requests must be sent to the root URL (\fB/\fP).
.IP \(bu 2
All requests must be sent as a POST request with JSON content in the request
body.
.IP \(bu 2
All responses are in JSON.
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fBrest_cherrypy\fP
.sp
The \fBrest_cherrypy\fP module is
more full\-featured, production\-ready, and has builtin security features.
.UNINDENT
.UNINDENT
.SS Deployment
.sp
The \fBrest_wsgi\fP netapi module is a standard Python WSGI app. It can be
deployed one of two ways.
.SS \fBsalt\-api\fP using a development\-only server
.sp
If run directly via salt\-api it uses the \fI\%wsgiref.simple_server()\fP that ships
in the Python standard library. This is a single\-threaded server that is
intended for testing and development. This server does \fBnot\fP use encryption;
please note that raw Salt authentication credentials must be sent with every
HTTP request.
.sp
\fBRunning this module via salt\-api is not recommended for most use!\fP
.SS Using a WSGI\-compliant web server
.sp
This module may be run via any WSGI\-compliant production server such as Apache
with mod_wsgi or Nginx with FastCGI.
.sp
It is highly recommended that this app be used with a server that supports
HTTPS encryption since raw Salt authentication credentials must be sent with
every request. Any apps that access Salt through this interface will need to
manually manage authentication credentials (either username and password or a
Salt token). Tread carefully.
.SS Usage examples
.INDENT 0.0
.TP
.B POST /
\fBExample request\fP for a basic \fBtest.ping\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS \-i \e
        \-H \(aqContent\-Type: application/json\(aq \e
        \-d \(aq[{"eauth":"pam","username":"saltdev","password":"saltdev","client":"local","tgt":"*","fun":"test.ping"}]\(aq localhost:8001
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.0 200 OK
Content\-Length: 89
Content\-Type: application/json

{"return": [{"ms\-\-4": true, "ms\-\-3": true, "ms\-\-2": true, "ms\-\-1": true, "ms\-\-0": true}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample request\fP for an asyncronous \fBtest.ping\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS \-i \e
        \-H \(aqContent\-Type: application/json\(aq \e
        \-d \(aq[{"eauth":"pam","username":"saltdev","password":"saltdev","client":"local_async","tgt":"*","fun":"test.ping"}]\(aq localhost:8001
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.0 200 OK
Content\-Length: 103
Content\-Type: application/json

{"return": [{"jid": "20130412192112593739", "minions": ["ms\-\-4", "ms\-\-3", "ms\-\-2", "ms\-\-1", "ms\-\-0"]}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample request\fP for looking up a job ID:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS \-i \e
        \-H \(aqContent\-Type: application/json\(aq \e
        \-d \(aq[{"eauth":"pam","username":"saltdev","password":"saltdev","client":"runner","fun":"jobs.lookup_jid","jid":"20130412192112593739"}]\(aq localhost:8001
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBExample response\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
HTTP/1.0 200 OK
Content\-Length: 89
Content\-Type: application/json

{"return": [{"ms\-\-4": true, "ms\-\-3": true, "ms\-\-2": true, "ms\-\-1": true, "ms\-\-0": true}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B form lowstate
A list of \fIlowstate\fP data appropriate for the
\fI\%client\fP interface you are calling.
.TP
.B status 200
success
.TP
.B status 401
authentication required
.UNINDENT
.SS \fBnetapi\fP developer reference
.SS Introduction to netapi modules
.sp
netapi modules generally bind to a port and start a service. They are
purposefully open\-ended. There could be multiple netapi modules that provide a
REST interface, a module that provides an XMPP interface, or Websockets, or
XMLRPC.
.sp
netapi modules are enabled by adding configuration to your master config file.
Check the docs for each module to see external requirements and configuration
settings.
.sp
Communication with Salt and Salt satellite projects is done by passing a list of
lowstate dictionaries to a client interface. A list of available client
interfaces is below. The lowstate dictionary items map to keyword arguments on
the client interface.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%Python client API\fP
.UNINDENT
.UNINDENT
.SS Client interfaces
.INDENT 0.0
.TP
.B class saltapi.APIClient(opts)
Provide a uniform method of accessing the various client interfaces in Salt
in the form of low\-data data structures. For example:
.sp
.nf
.ft C
>>> client = APIClient(__opts__)
>>> lowstate = {\(aqclient\(aq: \(aqlocal\(aq, \(aqtgt\(aq: \(aq*\(aq, \(aqfun\(aq: \(aqtest.ping\(aq, \(aqarg\(aq: \(aq\(aq}
>>> client.run(lowstate)
.ft P
.fi
.INDENT 7.0
.TP
.B local(*args, **kwargs)
Run \fI\%execution modules\fP syncronously
.sp
Wraps \fI\%salt.client.LocalClient.cmd()\fP\&.
.INDENT 7.0
.TP
.B Returns
Returns the result from the execution module
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B local_async(*args, **kwargs)
Run \fI\%execution modules\fP asyncronously
.sp
Wraps \fI\%salt.client.LocalClient.run_job()\fP\&.
.INDENT 7.0
.TP
.B Returns
job ID
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B local_batch(*args, **kwargs)
Run \fI\%execution modules\fP against batches of minions
.sp
New in version 0.8.4.

.sp
Wraps \fI\%salt.client.LocalClient.cmd_batch()\fP
.INDENT 7.0
.TP
.B Returns
Returns the result from the exeuction module for each batch of
returns
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B runner(fun, **kwargs)
Run \fIrunner modules <all\-salt.runners>\fP
.sp
Wraps \fI\%salt.runner.RunnerClient.low()\fP\&.
.INDENT 7.0
.TP
.B Returns
Returns the result from the runner module
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B wheel(fun, **kwargs)
Run \fI\%wheel modules\fP
.sp
Wraps \fI\%salt.wheel.WheelClient.master_call()\fP\&.
.INDENT 7.0
.TP
.B Returns
Returns the result from the wheel module
.UNINDENT
.UNINDENT
.UNINDENT
.SS Writing netapi modules
.sp
\fBnetapi\fP modules, put simply, bind a port and start a service.
They are purposefully open\-ended and can be used to present a variety of
external interfaces to Salt, and even present multiple interfaces at once.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIThe full list of netapi modules\fP
.UNINDENT
.UNINDENT
.SS Configuration
.sp
All \fBnetapi\fP configuration is done in the \fI\%Salt master
config\fP and takes a form similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rest_cherrypy:
  port: 8000
  debug: True
  ssl_crt: /etc/pki/tls/certs/localhost.crt
  ssl_key: /etc/pki/tls/certs/localhost.key
.ft P
.fi
.UNINDENT
.UNINDENT
.SS The \fB__virtual__\fP function
.sp
Like all module types in Salt, \fBnetapi\fP modules go through
Salt\(aqs loader interface to determine if they should be loaded into memory and
then executed.
.sp
The \fB__virtual__\fP function in the module makes this determination and should
return \fBFalse\fP or a string that will serve as the name of the module. If the
module raises an \fBImportError\fP or any other errors, it will not be loaded.
.SS The \fBstart\fP function
.sp
The \fBstart()\fP function will be called for each \fBnetapi\fP
module that is loaded. This function should contain the server loop that
actually starts the service. This is started in a multiprocess.
.SS Inline documentation
.sp
As with the rest of Salt, it is a best\-practice to include liberal inline
documentation in the form of a module docstring and docstrings on any classes,
methods, and functions in your \fBnetapi\fP module.
.SS Loader “magic” methods
.sp
The loader makes the \fB__opts__\fP data structure available to any function in
a \fBnetapi\fP module.
.SH RELEASES
.SS Release notes
.SS salt\-api 0.5.0
.sp
\fBsalt\-api\fP is gearing up for the initial public release with 0.5.0.
Although this release ships with working basic functionality it is awaiting the
authentication backend that will be introduced in Salt 0.10.4 before it can be
considered ready for testing at large.
.SS REST API
.sp
This release presents the flagship netapi module which provides a RESTful
interface to a running Salt system. It allows for viewing minions, runners, and
jobs as well as running execution modules and runners of a running Salt system
through a REST API that returns JSON.
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\fP on
Freenode.
.SS salt\-api 0.6.0
.sp
\fBsalt\-api\fP inches closer to prime\-time with 0.6.0. This release adds
the beginnings of a universal interface for accessing Salt components via the
tried and true method of passing low\-data to functions (a core component of
Salt\(aqs remote execution and state management).
.SS Low\-data interface
.sp
A new view accepts :\fI\%http:post\fP: requests at the root URL that accepts raw
low\-data as :\fI\%http:post\fP: data and passes that low\-data along to a client
interface in Salt. Currently only LocalClient and RunnerClient interfaces have
been implemented in Salt with more coming in the next Salt release.
.SS External authentication
.sp
Raw low\-data can contain authentication credentials that make use of Salt\(aqs new
\fI\%external_auth\fP system.
.sp
The following is a proof\-of\-concept of a working eauth call. (It bears
repeating this is a pre\-alpha release and this should not be used by anyone for
anything real.)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-si localhost:8000 \e
    \-d client=local \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqtest.ping\(aq \e
    \-d arg \e
    \-d eauth=pam \e
    \-d username=saltdev \e
    \-d password=saltdev
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SS salt\-api 0.7.0
.sp
\fBsalt\-api\fP is ready for alpha\-testing in the real world. This release
solidifies how \fBsalt\-api\fP will communicate with the larger Salt
ecosystem. In addition authentication and encryption (via SSL) have been added.
.sp
The first netapi module was a proof of concept written in Flask. It was quite
useful to be able to quickly hammer out a URL structure and solidify on an
interface for programmatically calling out to Salt components. As of this
release that module has been deprecated and removed in favor of a netapi module
written in CherryPy. CherryPy affords tremendous flexibility when composing a
REST interface and will present a stable platform for building out a very
adaptable and featureful REST API—also we\(aqre using the excellent and fast
CherryPy webserver for securely serving the API.
.SS Low\-data interface
.sp
The last release introduced a proof\-of\-concept for how the various Salt
components will communicate with each other. This is done by passing a data
structure to a client interface. This release expands on that. There are
currently three client interfaces in Salt.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fInetapi\-introduction\fP
.UNINDENT
.UNINDENT
.SS Encryption and authentication
.sp
Encryption has been added via SSL. You can supply an existing certificate or
generate a self\-signed certificate through Salt\(aqs \fI\%tls\fP
module.
.sp
Authentication is performed through Salt\(aqs incredibly flexible \fI\%external
auth\fP system and is maintained when accessing the API via session
tokens.
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SS salt\-api 0.7.5
.sp
This release is a mostly a minor release to pave a better path for
\fBsalt\-ui\fP though there are some small feature additions and bugfixes.
.SS Changes
.INDENT 0.0
.IP \(bu 2
Convenience URLs \fB/minions\fP and \fB/jobs\fP have been added as well as a
async client wrapper. This starts a job and immediately returns the job ID,
allowing you to fetch the result of that job at a later time.
.IP \(bu 2
The return format will now default to JSON if no specific format is
requested.
.IP \(bu 2
A new setting \fBstatic\fP has been added that will serve any static media from
the directory specified. In addition if an \fBindex.html\fP file is found
in that directory and the \fBAccept\fP header in the request prefer HTML that
file will be served.
.IP \(bu 2
All HTML, including the login form, has been removed from \fBsalt\-api\fP
and moved into the \fBsalt\-ui\fP project.
.IP \(bu 2
Sessions now live as long as the Salt token.
.UNINDENT
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SS salt\-api 0.8.0
.sp
We are happy to announce the release of \fBsalt\-api\fP 0.8.0.
.sp
This release encompasses bugfixes and new features for the
\fBrest_cherrypy\fP netapi module that
provides a RESTful interface for a running Salt system.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Requires Salt 0.13
.UNINDENT
.UNINDENT
.SS Changes
.sp
In addition to the usual documentation improvements and bug fixes this release
introduces the following changes and additions.
.sp
Please note the backward incompatible change detailed below.
.SS RPM packaging
.sp
Thanks to Andrew Niemantsvedriet (\fI\%@kaptk2\fP) \fBsalt\-api\fP is now
available in Fedora package repositories as well as RHEL compatible systems via
EPEL.
.INDENT 0.0
.IP \(bu 2
\fI\%http://dl.fedoraproject.org/pub/epel/5/i386/repoview/salt\-api.html\fP
.IP \(bu 2
\fI\%http://dl.fedoraproject.org/pub/epel/5/x86_64/repoview/salt\-api.html\fP
.IP \(bu 2
\fI\%http://dl.fedoraproject.org/pub/epel/6/i386/repoview/salt\-api.html\fP
.IP \(bu 2
\fI\%http://dl.fedoraproject.org/pub/epel/6/x86_64/repoview/salt\-api.html\fP
.UNINDENT
.sp
Thanks also to Clint Savage (\fI\%@herlo\fP) and Thomas Spura (\fI\%@tomspur\fP) for
helping with that process.
.SS Ubuntu PPA packaging
.sp
Thanks to Sean Channel (\fI\%@seanchannel\fP, pentabular) \fBsalt\-api\fP is
available as a PPA on the SaltStack LaunchPad team.
.sp
\fI\%https://launchpad.net/~saltstack/+archive/salt\fP
.SS Authentication information on login
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Backward incompatible change
.sp
The \fB/login\fP URL no
longer responds with a 302 redirect for success.
.sp
Although this is behavior is common in the browser world it is not useful
from an API so we have changed it to return a 200 response in this release.
.sp
We take backward compatibility very seriously and we apologize for the
inconvenience. In this case we felt the previous behavior was limiting.
Changes such as this will be rare.
.UNINDENT
.UNINDENT
.sp
New in this release is displaying information about the current session and the
current user. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS localhost:8000/login \e
    \-H \(aqAccept: application/x\-yaml\(aq
    \-d username=\(aqsaltdev\(aq
    \-d password=\(aqsaltdev\(aq
    \-d eauth=\(aqpam\(aq

return:
\- eauth: pam
  expire: 1365508324.359403
  perms:
  \- \(aq@wheel\(aq
  \- grains.*
  \- state.*
  \- status.*
  \- sys.*
  \- test.*
  start: 1365465124.359402
  token: caa7aa2b9dbc4a8adb6d2e19c3e52be68995ef4b
  user: saltdev
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Bypass session handling
.sp
A convenience URL has been added
(\fB/run\fP) to bypass the normal
session\-handling process.
.sp
The REST interface uses the concept of "lowstate" data to specify what function
should be executed in Salt (plus where that function is and any arguments to
the function). This is a thin wrapper around Salt\(aqs various "client"
interfaces, for example Salt\(aqs \fI\%LocalClient()\fP which can
accept authentication credentials directly.
.sp
Authentication with the REST API typically goes through the login URL and a
session is generated that is tied to a Salt external_auth token. That token is
then automatically added to the lowstate for subsequent requests that match the
current session.
.sp
It is sometimes useful to handle authentication or token management manually
from another program or script. For example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
curl \-sS localhost:8000/run \e
    \-d client=\(aqlocal\(aq \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqtest.ping\(aq \e
    \-d eauth=\(aqpam\(aq \e
    \-d username=\(aqsaltdev\(aq \e
    \-d password=\(aqsaltdev\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It is a Bad Idea (TM) to do this unless you have a very good reason and a well
thought out security model.
.SS Logout
.sp
An URL has been added
(\fB/logout\fP) that will cause
the client\-side to expire the session cookie and the server\-side session to be
invalidated.
.SS Running the REST interface via any WSGI\-compliant server
.sp
The \fBrest_cherrypy\fP netapi module is
a regular WSGI application written using the CherryPy framework. It was written
with the intent of also running from any WSGI\-compliant server such as Apache
and mod_wsgi, Gunicorn, uWSGI, Nginx and FastCGI, etc.
.sp
The WSGI application entry point has been factored out into a stand\-alone file
in this release suitable for calling from an external server.
\fBsalt\-api\fP does not need to be running in this scenario.
.sp
For example, an Apache virtual host configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<VirtualHost *:80>
    ServerName example.com
    ServerAlias *.example.com

    ServerAdmin webmaster@example.com

    LogLevel warn
    ErrorLog /var/www/example.com/logs/error.log
    CustomLog /var/www/example.com/logs/access.log combined

    DocumentRoot /var/www/example.com/htdocs

    WSGIScriptAlias / /path/to/saltapi/netapi/rest_cherrypy/wsgi.py
</VirtualHost>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Participation
.sp
Please get involved by \fI\%filing issues\fP on GitHub, \fI\%discussing on the mailing
list\fP, and chatting in \fB#salt\-devel\fP on Freenode.
.SS salt\-api 0.8.2
.sp
\fBsalt\-api\fP 0.8.2 is largely a bugfix release that fixes a
compatibility issue with changes in Salt 0.15.9.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Requires Salt 0.15.9 or greater
.UNINDENT
.UNINDENT
.sp
The following changes have been made to the \fBrest_cherrypy\fP netapi module that provides a RESTful
interface for a running Salt system:
.INDENT 0.0
.IP \(bu 2
Fixed issue #87 which caused the Salt master\(aqs PID file to be overwritten.
.IP \(bu 2
Fixed an inconsistency with the return format for the \fB/minions\fP
convenience URL.
.sp
\fBWARNING:\fP
.INDENT 2.0
.INDENT 3.5
This is a backward incompatible change.
.UNINDENT
.UNINDENT
.IP \(bu 2
Added a dedicated URL for serving an HTML app
.IP \(bu 2
Added dedicated URL for serving static media
.UNINDENT
.SS salt\-api 0.8.3
.sp
\fBsalt\-api\fP 0.8.3 is a small release largely concerning changes and
fixes to the \fBrest_cherrypy\fP netapi
module.
.sp
This release will likely be the final salt\-api release as a separate project.
The Salt team has begun the process of merging this project directly in to the
main Salt project. What this means for end users is only that there will be one
fewer package to install. Salt itself will ship with the current \fBnetapi\fP
modules and the API and configuration will remain otherwise unchanged.
.sp
The reasoning behind merging the two projects is simply to lower the barrier to
entry. Having a separate project was useful for experimentation and exploration
but there was no technical reason for the separation \-\- salt\-api uses the same
flexible module system that Salt uses and those modules will simply be moved
into Salt.
.sp
Going forward, Salt will ship with the same REST interface that salt\-api
currently provides. This will have the side benefit of not having to coordinate
incompatible Salt and salt\-api releases.
.SS \fBrest_cherrypy\fP changes
.sp
An HTTP stream of Salt\(aqs event bus has been added. This stream conforms to the
SSE (Server Sent Events) spec and is easily consumed via JavaScript clients.
This HTTP stream allows a real\-time window into a running Salt system. A client
watching the stream can see as soon as individual minions return data for a
job, authentication events, and any other events that go through the Salt
master.
.sp
A new configuration option to only allow access to whitelisted IP addresses. Of
course, IP addresses can be easily spoofed so this feature should be thought of
as a usability addition and not used for security purposes.
.sp
An option to disable SSL has been added. Previously SSL could only be disabled
while running the HTTP server with debugging options enabled. Now each item can
be enabled or disabled independently of the other.
.sp
In addition, there has been several bug fixes, packaging fixes, and minor code
simplification.
.SS salt\-api 0.8.4
.sp
\fBsalt\-api\fP 0.8.4 sees a number of new features and feature
enhancements in the \fBrest_cherrypy\fP
netapi module.
.sp
Work to merge \fBsalt\-api\fP into the main Salt distribution continues and
it is likely to be included in Salt\(aqs Helium release.
.SS \fBrest_cherrypy\fP changes
.SS Web hooks
.sp
This release adds a \fBnew URL /hook\fP that allows salt\-api to serve as a
generic web hook interface for Salt. POST requests to the URL trigger events on
Salt\(aqs event bus.
.sp
External services like Amazon SNS, Travis CI, GitHub, etc can easily send
signals through Salt\(aqs Reactor.
.sp
The following HTTP call will trigger the following Salt event.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
% curl \-sS http://localhost:8000/hook/some/tag \e
    \-d some=\(aqData!\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Event tag: \fBsalt/netapi/hook/some/tag\fP\&. Event data:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "_stamp": "2014\-04\-04T12:14:54.389614",
  "post": {
    "some": "Data!"
  },
  "headers": {
    "Content\-Type": "application/x\-www\-form\-urlencoded",
    "Host": "localhost:8000",
    "User\-Agent": "curl/7.32.0",
    "Accept": "*/*",
    "Content\-Length": "10",
    "Remote\-Addr": "127.0.0.1"
  }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Batch mode
.sp
The \fBlocal_batch()\fP client exposes Salt\(aqs batch mode
for executing commands on incremental subsets of minions.
.SS Tests!
.sp
We have added the necessary framework for testing the rest_cherrypy module and
this release includes a number of both unit and integration tests. The suite
can be run with the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
python \-m unittest discover \-v
.ft P
.fi
.UNINDENT
.UNINDENT
.SS CherryPy server stats and configuration
.sp
A number of settings have been added to better configure the performance of the
CherryPy web server. In addition, a \fBnew URL /stats\fP has been added to expose metrics on
the health of the CherryPy web server.
.SS Improvements for running with external WSGI servers
.sp
Running the \fBrest_cherrypy\fP module via a WSGI\-capable server such as Apache
or Nginx can be tricky since the user the server is running as must have
permission to access the running Salt system. This release eases some of those
restrictions by accessing Salt\(aqs key interface through the external auth
system. Read access to the Salt configuration is required for the user the
server is running as and everything else should go through external auth.
.SS More information in the jobs URLs
.sp
The output for the \fB/jobs/\fP has been augmented with more
information about the job such as which minions are expected to return for that
job. This same output will be added to the other salt\-api URLs in the next
release.
.SS Improvements to the Server Sent Events stream
.sp
Event tags have been added to \fBthe HTTP event stream\fP as SSE tags which allows JavaScript
or other consumers to more easily match on certain tags without having to
inspect the whole event.
.SH REFERENCE
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.IP \(bu 2
\fIglossary\fP
.UNINDENT
.SH AUTHOR
Thomas S. Hatch <thatch45@gmail.com> and many others, please see the Authors file
.SH COPYRIGHT
2012, Thomas S. Hatch
.\" Generated by docutils manpage writer.
.
